/* Auto-generated by Parser/pgen */

/* Token types */
#ifndef TOKEN_H
#define TOKEN_H

#undef TILDE   /* Prevent clash of our definition with system macro. Ex AIX, ioctl.h */

const int ENDMARKER       = 0;
const int NAME            = 1;
const int NUMBER          = 2;
const int STRING          = 3;
const int NEWLINE         = 4;
const int EQU             = 5;
const int PARA            = 6;
const int PAGE            = 7;
const int SEGMENT         = 8;
const int ENDS            = 9;
const int ARG             = 10;
const int MACRO           = 11;
const int ENDM            = 12;
const int GROUP1_INST     = 13;
const int GROUP2_INST     = 14;
const int GROUP3_INST     = 15;
const int GROUP4_INST     = 16;
const int GROUP5_INST     = 17;
const int GROUP6_INST     = 18;
const int GROUP7_INST     = 19;
const int GROUP8_INST     = 20;
const int GROUP9_INST     = 21;
const int GROUP10_INST    = 22;
const int GROUP11_INST    = 23;
const int GROUP12_INST    = 24;
const int GROUP13_INST    = 25;
const int GROUP14_INST    = 26;
const int GROUP15_INST    = 27;
const int GROUP16_INST    = 28;
const int WIDE            = 29;
const int SHORT           = 30;
const int LONG            = 31;
const int DP              = 32;
const int ZP              = 33;
const int AREG            = 34;
const int XREG            = 35;
const int YREG            = 36;
const int SREG            = 37;
const int CPU6502         = 38;
const int CPU65C02        = 39;
const int CPU65C816       = 40;
const int WIDEA           = 41;
const int SHORTA          = 42;
const int WIDEXY          = 43;
const int SHORTXY         = 44;
const int END_BLOCK       = 45;
const int ELSE            = 46;
const int ENDIF           = 47;
const int DB              = 48;
const int DW              = 49;
const int DBW             = 50;
const int DA              = 51;
const int DS              = 52;
const int ALIGN           = 53;
const int BLOCK           = 54;
const int IFDEF           = 55;
const int IFNDEF          = 56;
const int IF              = 57;
const int QUESTION        = 58;
const int HASH            = 59;
const int LPAR            = 60;
const int RPAR            = 61;
const int LSQB            = 62;
const int RSQB            = 63;
const int COLON           = 64;
const int COMMA           = 65;
const int SEMI            = 66;
const int PLUS            = 67;
const int MINUS           = 68;
const int STAR            = 69;
const int SLASH           = 70;
const int VBAR            = 71;
const int AMPER           = 72;
const int LESS            = 73;
const int GREATER         = 74;
const int EQUAL           = 75;
const int DOT             = 76;
const int PERCENT         = 77;
const int LBRACE          = 78;
const int RBRACE          = 79;
const int EXCLAMATION     = 80;
const int EQEQUAL         = 81;
const int NOTEQUAL        = 82;
const int LESSEQUAL       = 83;
const int GREATEREQUAL    = 84;
const int TILDE           = 85;
const int CIRCUMFLEX      = 86;
const int LEFTSHIFT       = 87;
const int RIGHTSHIFT      = 88;
const int DOUBLEVBAR      = 89;
const int DUUBLEAMPER     = 90;
const int OP              = 91;
const int ERRORTOKEN      = 92;
const int N_TOKENS        = 96;
const int NT_OFFSET       = 256;

/* Special definitions for cooperation with parser */

inline bool ISTERMINAL(int x) { return x < NT_OFFSET; }
inline bool ISNONTERMINAL(int x) {return x >= NT_OFFSET; }
inline bool ISEOF(int x) { return x == ENDMARKER; }


extern const char * const casmTokenNames[]; /* Token names */
int oneChar(int);
int twoChars(int, int);
int threeChars(int, int, int);

#endif /* !TOKEN_H */
